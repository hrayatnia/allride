name: Kotlin Ktor CI/CD

on:
  push:
    branches: [ "main", "develop" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main", "develop" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.1
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: AllRide2024!
          POSTGRES_DB: allride
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      
      memcached:
        image: memcached:1.6
        ports:
          - 11211:11211
      
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: sqs
          AWS_DEFAULT_REGION: us-east-1
          EAGER_SERVICE_LOADING: 1
        ports:
          - 4566:4566
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 30
          --health-start-period 20s

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.5
          
      - name: Verify Gradle wrapper
        run: |
          gradle init --type basic --dsl kotlin --no-daemon || true
          gradle wrapper --gradle-version 8.5
          chmod +x ./gradlew
        
      - name: Install AWS CLI
        run: |
         curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
         unzip awscliv2.zip
         sudo ./aws/install --update
         aws --version
         echo "AWS_PAGER=\"\"" >> $GITHUB_ENV

        
      - name: Initialize LocalStack
        run: |
          chmod +x ./init-localstack.sh
          ./init-localstack.sh
        
      - name: Run Tests
        run: ./gradlew test
        
      - name: Upload Test Results
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/reports/tests/

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Create Terraform Variables
        run: |
          cat > terraform/terraform.tfvars <<EOF
          heroku_email     = "${{ secrets.HEROKU_EMAIL }}"
          heroku_api_key   = "${{ secrets.HEROKU_API_KEY }}"
          db_username      = "${{ secrets.DB_USERNAME }}"
          db_password      = "${{ secrets.DB_PASSWORD }}"
          app_name         = "allride"
          environment      = "production"
          EOF
      
      - name: Terraform Init
        run: terraform -chdir=terraform init
      
      - name: Terraform Plan
        run: terraform -chdir=terraform plan -out=tfplan
      
      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve tfplan
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Login to Heroku
        uses: docker/login-action@v3
        with:
          registry: registry.heroku.com
          username: ${{ secrets.HEROKU_EMAIL }}
          password: ${{ secrets.HEROKU_API_KEY }}
      
      - name: Pull and tag Docker image for Heroku
        run: |
          DOCKER_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}"
          docker pull $DOCKER_IMAGE
          docker tag $DOCKER_IMAGE registry.heroku.com/allride/web
      
      - name: Push to Heroku
        run: |
          docker push registry.heroku.com/allride/web
          
      - name: Release to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          curl -X PATCH https://api.heroku.com/apps/allride/formation \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.heroku+json; version=3.docker-releases" \
            -H "Authorization: Bearer ${HEROKU_API_KEY}" \
            -d '{"updates":[{"type":"web","docker_image":""}]}'

  documentation:
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        
      - name: Generate Documentation
        run: ./gradlew dokkaHtml
        
      - name: Deploy Documentation
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/dokka/html 
