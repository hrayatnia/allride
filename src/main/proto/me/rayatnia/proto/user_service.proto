syntax = "proto3";

package me.rayatnia.proto;

import "google/protobuf/timestamp.proto"; // For LocalDateTime equivalent

option java_package = "me.rayatnia.proto";
option java_multiple_files = true;

// Represents user data
message User {
    string id = 1; // UUID will be represented as a string
    string first_name = 2;
    string last_name = 3;
    string email = 4;
    string phone_number = 5;
    string address = 6;
    string birth_date = 7;
    string status = 8;
    google.protobuf.Timestamp created_at = 9; // For LocalDateTime
}

// Validation related messages
message ValidationError {
    int32 row = 1;
    repeated string errors = 2;
}

message ValidateUserDataRequest {
    bytes file_content = 1;
    string original_file_name = 2;
}

message ValidateUserDataResponse {
    repeated ValidationError errors = 1;
    bool is_valid = 2;
    string message = 3;
}

// Upload related messages
message UploadUserDataRequest {
    bytes file_content = 1;
    string original_file_name = 2;
}

message UploadUserDataResponse {
    string message = 1;
    string file_id = 2; // Corresponds to event.aggregateId
}

// Get user related messages
message GetUserByIdRequest {
    string id = 1;
}

message GetUserByEmailRequest {
    string email = 1;
}

// Response for getting a single user (could be empty if not found)
// Alternatively, you could have a specific NotFound error in gRPC status
message GetUserResponse {
    User user = 1;
}

// Request to get all users (no parameters needed for this simple case)
message GetAllUsersRequest {
    // No fields needed
}

// Response for getting all users
message GetAllUsersResponse {
    repeated User users = 1;
}

// The gRPC service definition
service UserService {
    // Validates user data from a CSV file
    rpc ValidateUserData (ValidateUserDataRequest) returns (ValidateUserDataResponse);
    
    // Uploads user data from a CSV file
    rpc UploadUserData (UploadUserDataRequest) returns (UploadUserDataResponse);

    // Retrieves a user by their ID
    rpc GetUserById (GetUserByIdRequest) returns (GetUserResponse);

    // Retrieves a user by their email
    rpc GetUserByEmail (GetUserByEmailRequest) returns (GetUserResponse);

    // Retrieves all users
    rpc GetAllUsers (GetAllUsersRequest) returns (GetAllUsersResponse);
} 